
# TODO Remove for production propably ? 
if test -z "${overlays}"; then
    setenv overlays ""
fi

if test -z "${extra_bootargs}"; then
    setenv extra_bootargs ""
fi

# If the u-boot configuration is specified, set fit_conf_spec
if test -n "${boot_config}"; then
    setenv fit_conf_spec "#${boot_config}${overlays}"
else
    setenv fit_conf_spec ""
fi

# Boot args from bootloader
fdt addr ${fdt_addr}

# Read tryboot property (assume it's a uint32 or string '1')
fdt get value tryboot_status_hex /chosen/bootloader tryboot
setexpr tryboot_status $tryboot_status_hex
if test "${tryboot_status}" = "1"; then
    # Add the tryboot to the bootargs
    env set bootargs "${bootargs} tryboot"
fi

# Read partition number (assume integer)
fdt get value uboot_partition_hex /chosen/bootloader partition
setexpr uboot_partition $uboot_partition_hex

# Pass in the bootargs the uboot partition
env set bootargs "${bootargs} ubootpartnum=${uboot_partition}"

# Load the bootargs from bootloader and flatdevice tree
fdt get value fdt_bootargs /chosen bootargs

# Add additional bootargs from fdt_bootargs coming from bootloader and flatdevice tree
env set bootargs "${bootargs} ${fdt_bootargs}"

# Add additional bootargs from kernel build
env set bootargs "${bootargs} root=${mender_kernel_root} @@KERNEL_EXTRA_BOOT_ARGS@@ ${extra_bootargs}"

@@KERNEL_BOOTCMD@@ ${kernel_addr_r}${fit_conf_spec}